name: Build

on: 
  push:
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  linux_gcc:
    strategy:
      fail-fast: false
      matrix:
        compilerC: [clang-mp-14]
        compilerCXX: [clang++-mp-14]
        macversion: [macos-12] # , macos-11, macos-10.15]
    name: Build MacOS ${{ matrix.macversion }}
    runs-on: ${{ matrix.macversion }}
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: HarbourMasters/Shipwright # dcvz/Shipwright # briaguya-ai/Shipwright #  
        ref: develop-zhora # develop-rachael #

    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: ci

    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/soh/ROM
          ~/.ccache
        key: build-${{github.run_id}}
        restore-keys: |
          build

    - name: Prepare Build
      run: |
        if [[ ! -e soh/ROM/baserom_non_mq.z64 ]]; then
          mkdir -p soh/ROM 
          wget -qO soh/ROM/ROM.zip ${{ secrets.DEBUG_ROM }} 2>/dev/null
          7za e soh/ROM/ROM.zip -so > soh/ROM/baserom_non_mq.z64
        fi
        cp soh/ROM/baserom_non_mq.z64 soh
        cp soh/ROM/baserom_non_mq.z64 OTRExporter

    - name: Build MacPorts
      run: |
        MPVER=2.7.2
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache        
        if [[ ! -e MacPorts-${MPVER} ]]; then
          curl -sLO https://distfiles.macports.org/MacPorts/MacPorts-${MPVER}.tar.bz2
          tar -xf MacPorts-${MPVER}.tar.bz2
          cd MacPorts-${MPVER}
          ./configure
          make && cd ../
          rm MacPorts-${MPVER}.tar.bz2
        fi
        sudo make -C MacPorts-${MPVER} install
        sudo /opt/local/bin/port -v selfupdate
        echo "/opt/local/bin" >> $GITHUB_PATH

    - name: Install Dependencies
      run: |       
        yes | sudo /opt/local/bin/port install clang-14
        brew install sdl2 glew dylibbundler ccache rsync
        ${{ matrix.compilerC }} --version
        
    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/setup-go@v3
      with:
        go-version: '>=1.17.0'

    - name: Build SOH
      run: |
        export PATH=/usr/local/opt/ccache/libexec:$PATH
        make setup -C soh -j4 OPTFLAGS=-O2 DEBUG=0 CC="ccache ${{ matrix.compilerC }} -arch x86_64 -arch arm64" CXX="ccache ${{ matrix.compilerCXX }}++ -arch x86_64 -arch arm64" LD="ld"
        make -C soh -j4 OPTFLAGS=-O2 DEBUG=0 CC="ccache ${{ matrix.compilerC }} -arch x86_64 -arch arm64" CXX="ccache ${{ matrix.compilerCXX }}++ -arch x86_64 -arch arm64" LD="ld"
        make appbundle -C soh -j4 CC="ccache ${{ matrix.compilerC }} -arch x86_64 -arch arm64" CXX="ccache ${{ matrix.compilerCXX }}++ -arch x86_64 -arch arm64" LD="ld"

    - name: Ccache stats
      run: ccache -s

    - name: Prepare Artifact
      run: |
        export APP_PATH=soh/soh.app/Contents/MacOS
        mkdir Release
        rsync -av --exclude='*.gitignore' OTRGui/assets $APP_PATH/
        cp ZAPDTR/ZAPD.out $APP_PATH/assets/extractor/
        cp -r soh/assets/xml $APP_PATH/assets/extractor/xmls
        cp -r OTRExporter/assets $APP_PATH/assets/game
        sed -i '' 's/>soh</>soh.sh</g' soh/soh.app/Contents/Info.plist
        chmod +x ci/soh.sh
        cp ci/soh.sh $APP_PATH/ 
        7z a Release/soh.7z ./soh/soh.app  
    - uses: actions/upload-artifact@v3
      with:
          name: SOH-MacOS-Extract-${{ matrix.macversion }}
          path: Release
   
    #- name: Publish Release
    #  run: |
    #    go install github.com/tcnksm/ghr@latest
    #    ghr -u qurious-pixel -r Shipwright-linux -recreate -n "AppImage 64bit build" -t "${{ secrets.GITHUB_TOKEN }}" zelda64 artifacts
