name: Build

on: 
  push:
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  switch_gcc:
    name: Build Switch NRO
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: KiritoDv/Shipwright
        ref: znx 

    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: appimage

    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/soh/ROM
          ~/.ccache
        key: build-${{github.run_id}}
        restore-keys: |
          build

    - name: Prepare Build
      run: |
        if [[ ! -e soh/ROM/baserom_non_mq.z64 ]]; then
          mkdir -p soh/ROM 
          wget -qO soh/ROM/ROM.zip ${{ secrets.DEBUG_ROM }} 2>/dev/null
          7za e soh/ROM/ROM.zip -so > soh/ROM/baserom_non_mq.z64
        fi
        cp soh/ROM/baserom_non_mq.z64 soh
        cp soh/ROM/baserom_non_mq.z64 OTRExporter

    #- name: Build Docker Image
    #  run: |
    #    cp appimage/.github/workflows/Dockerfile Dockerfile
    #    sudo docker build . -t znx --no-cache

    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/setup-go@v3
      with:
        go-version: '>=1.17.0'

    - name: Linux Fixes
      run: |
        sed -i '130,131d' soh/Makefile
        sed -i '/-Wno-missing-field-initializers/i -Wno-error=stringop-overflow \\' libultraship/Makefile # -Wno-error=multichar -Wno-error=sign-compare -Wno-unused-variable
        cp appimage/FileStream.cpp StormLib/src/FileStream.cpp
    #    sed -i 's/exit(0);/_Exit(0);/g' libultraship/libultraship/Lib/Fast3D/gfx_glx.cpp
    #    sed -i 's/exit(0);/_Exit(0);/g' libultraship/libultraship/Lib/Fast3D/gfx_sdl2.cpp
    #    sed -i 's/-lGLEW //g' ZAPDTR/Makefile
    #    sed -i '/GLEW \\/d' soh/Makefile
    #    #sed -i '/libultraship \\/a \.\.\/StormLib\/src \\' libultraship/Makefile
        

    - name: Build StormLib
      run: sudo docker run --rm -v $(pwd):/soh -w /soh quriouspixel/devkitpro /bin/bash -c "chmod +x appimage/docker/stormlib.sh && appimage/docker/stormlib.sh"
       
    - name: Build libultraship
      run: sudo docker run --rm -e DEVKITPRO=/opt/devkitpro -v $(pwd):/soh -w /soh quriouspixel/devkitpro /bin/bash -c "chmod +x appimage/docker/libultraship.sh && appimage/docker/libultraship.sh"
      
    - name: Build SOH
      run: sudo docker run --rm -e DEVKITPRO=/opt/devkitpro -v $(pwd):/soh -w /soh quriouspixel/devkitpro /bin/bash -c "make -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="gcc" CXX="g++"

    - name: Prepare Artifact
      run: |
        mkdir Release
        cp soh/soh.nro Release
        rsync -av --exclude='*.gitignore' OTRGui/build/assets Release/
        cp ZAPDTR/ZAPD.out Release/assets/extractor/
        cp appimage/.github/workflows/scripts/OTR_Extractor.sh Release
    #    cp -r appimage/.github/workflows/scripts/version Release/assets/
    - uses: actions/upload-artifact@v3
      with:
          name: SOH-Switch-nro
          path: Release

    #- name: Build AppImage
    #  run: |
    #    chmod +x appimage/.github/workflows/scripts/appimage.sh
    #    appimage/.github/workflows/scripts/appimage.sh

    #- name: Publish Release
    #  run: |
    #    go install github.com/tcnksm/ghr@latest
    #    ghr -u qurious-pixel -r Shipwright-linux -recreate -n "AppImage 64bit build" -t "${{ secrets.GITHUB_TOKEN }}" zelda64 artifacts
