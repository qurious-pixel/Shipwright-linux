name: Build

on: 
  push:
  pull_request:
    branches: 
      - main
  workflow_dispatch:
  
jobs:
  linux_gcc:
    name: Build Linux GCC
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: th-2021/Shipwright-cmake
        ref: develop

    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: ci
          
    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/soh/ROM
          ~/.ccache
        key: build-${{github.run_id}}
        restore-keys: |
          build
            
    - name: Prepare Build
      run: |
        if [[ ! -e soh/ROM/baserom_non_mq.z64 ]]; then
          mkdir -p soh/ROM 
          wget -qO soh/ROM/ROM.zip ${{ secrets.DEBUG_ROM }} 2>/dev/null
          7za e soh/ROM/ROM.zip -so > soh/ROM/baserom_non_mq.z64
        fi
        cp soh/ROM/baserom_non_mq.z64 OTRExporter

    - name: Remove Microsft Source List
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
  
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y \
            libc6-dev \
            binutils \
            gcc-10 \
            g++-10 \
            python \
            ccache \
            lld \
            ninja-build \
            libsdl2-dev \
            zlib1g-dev \
            libbz2-dev \
            libpng-dev \
            libgles2-mesa-dev
        sudo ln -sf /usr/bin/gcc-10 /usr/bin/gcc
        sudo ln -sf /usr/bin/gcc-10 /usr/bin/cc
        sudo ln -sf /usr/bin/g++-10 /usr/bin/g++
        sudo ln -sf /usr/bin/g++-10 /usr/bin/c++
    #- name: Clone External Libs
    #  run: |
    #    git clone https://github.com/Perlmint/glew-cmake.git external/glew
    #    git clone https://github.com/ladislav-zezula/StormLib external/StormLib 

    - name: Install CMAKE Build
      run: |
        CMAKEVER=3.22.5
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache
        if [[ ! -e cmake-${CMAKEVER} ]]; then
          wget https://github.com/Kitware/CMake/releases/download/v${CMAKEVER}/cmake-${CMAKEVER}.tar.gz
          tar -xf cmake-${CMAKEVER}.tar.gz
          cd cmake-${CMAKEVER}
          ./bootstrap
          make && cd ../
          rm cmake-${CMAKEVER}.tar.gz
        fi
        sudo make -C cmake-${CMAKEVER} install
        cmake --version
          
    - name: Build SDL2
      run: |
        SDL2VER=2.0.22
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache
        if [[ ! -e SDL2-${SDL2VER} ]]; then
          curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
          tar -xzf SDL2-${SDL2VER}.tar.gz
          cd SDL2-${SDL2VER}
          ./configure --prefix=/usr
          make && cd ../
          rm SDL2-${SDL2VER}.tar.gz
        fi
        sudo make -C SDL2-${SDL2VER} install
        sudo cp -av /lib/libSDL* /lib/x86_64-linux-gnu/

    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/setup-go@v3
      with:
        go-version: '>=1.17.0'

    - name: Ubuntu 20.04 fixes
      run: |
        echo "Fixes"
        #cp ci/{gfx_glx.cpp,gfx_sdl2.cpp} libultraship/libultraship/Lib/Fast3D/
        #cp ci/ZAPD_CMakeLists.txt ZAPDTR/ZAPD/CMakeLists.txt
        #cp ci/libultraship_CMakeLists.txt libultraship/libultraship/CMakeLists.txt
        #cp ci/soh_CMakeLists.txt soh/CMakeLists.txt
        #cp ci/FindSDL2.cmake soh/CMake/
    #- name: Build OTRExporter
    #  run: |
    #    cd OTRExporter
    #    sed "s%../ZAPDTR/ZAPD.out%build-cmake/ZAPD/ZAPD.out%" < extract_assets.py > extract_assets_cmake.py  
    #    cmake -S . -B build-cmake -G Ninja \
    #        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    #    cmake --build build-cmake -- -j$(nproc)
    #    ccache -s    
    #- name: Extract Assets
    #  run: |
    #    cd OTRExporter
    #    chmod +x extract_assets_cmake.py
    #    python3 extract_assets_cmake.py
    - name: Build SOH
      run: |
        cmake -H. -Bbuild-cmake -GNinja \
          -DSDL2_DIR=/usr/lib/cmake/SDL2/ 
          #-DCMAKE_TOOLCHAIN_FILE=CMake/Linux32bit-toolchain.cmake \
          #-DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          #-DCMAKE_FIND_LIBRARY_SUFFIXES=.a \
          #-G Ninja
        cmake --build build-cmake -- -j$(nproc)
        
    #- name: Build OTRGui
    #  run: |
    #    cmake -B OTRGui/build -S OTRGui
    #    cmake --build OTRGui/build -- -j$(nproc)

    #- name: Prepare Artifact
    #  run: |
    #    mkdir Release
    #    cp soh/build-cmake/soh.elf Release
    #    cp OTRGui/build/OTRGui Release
    #    rsync -av --exclude='*.gitignore' OTRGui/build/assets Release/
    #    cp OTRExporter/build-cmake/ZAPD/ZAPD.out Release/assets/extractor/
    
    - name: Build CPACK packages
      run: |
        cd build-cmake
        cpack -G DEB
        cpack -G ZIP
        cpack -G External
        cd ..
        mkdir Release
        cp _packages/{*.appimage,*.zip,*.deb} Release
        ls -al .
        ls -al build-cmake
        
    - uses: actions/upload-artifact@v3
      with:
          name: SOH-Linux-cmake
          path: Release

    #- name: Check soh.elf
    #  run: |
    #    ls -al Release

    - name: Publish Release
      run: |
        go install github.com/tcnksm/ghr@latest
        ghr -u qurious-pixel -r Shipwright-linux -recreate -n "Cmake build" -t "${{ secrets.GITHUB_TOKEN }}" cmake Release
