name: Build

on: 
  push:
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  linux_gcc:
    name: Build Linux GCC
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: HarbourMasters/Shipwright # dcvz/Shipwright # 
        ref: zelda64 # zelda64_mac # 

    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: appimage

    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/soh/ROM
          ~/.ccache
        key: build-${{github.run_id}}
        restore-keys: |
          build

    - name: Prepare Build
      run: |
        if [[ ! -e soh/ROM/baserom_non_mq.z64 ]]; then
          mkdir -p soh/ROM 
          wget -qO soh/ROM/ROM.zip ${{ secrets.DEBUG_ROM }} 2>/dev/null
          7za e soh/ROM/ROM.zip -so > soh/ROM/baserom_non_mq.z64
        fi
        cp soh/ROM/baserom_non_mq.z64 soh
        cp soh/ROM/baserom_non_mq.z64 OTRExporter

    - name: Remove Microsft Source List
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y \
            libc6-dev \
            binutils \
            gcc-10 \
            g++-10 \
            python \
            ccache \
            cmake \
            lld \
            libsdl2-dev \
            zlib1g-dev \
            libbz2-dev \
            libpng-dev \
            libgles2-mesa-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
        gcc --version
        g++ --version

    - name: Build glew
      run: |
        git clone https://github.com/Perlmint/glew-cmake.git 
        cmake glew-cmake 
        make -j$(nproc) 
        sudo make install ARCH64=true
        #mkdir -p StormLib/build
        cp /usr/local/lib/libGLEW.a libultraship

    - name: Build SDL2
      run: |
        SDL2VER=2.0.22
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache
        if [[ ! -e SDL2-${SDL2VER} ]]; then
          curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
          tar -xzf SDL2-${SDL2VER}.tar.gz
          cd SDL2-${SDL2VER}
          ./configure --prefix=/usr
          make && cd ../
          rm SDL2-${SDL2VER}.tar.gz
        fi
        sudo make -C SDL2-${SDL2VER} install
        sudo cp -av /lib/libSDL* /lib/x86_64-linux-gnu/

    #- name: Build StormLib
    #  run: |
    #    git clone https://github.com/ladislav-zezula/StormLib external/StormLib
    #    cmake -B external/StormLib/build -S external/StormLib
    #    cmake --build external/StormLib/build
    #    cp external/StormLib/build/libstorm.a external
    #    cp /usr/local/lib/libGLEW.a external

    - name: Linux Fixes
      run: |
        #sed -i 's/-m32//g' libultraship/Makefile
        #sed -i 's/-m32//g' soh/Makefile
        #sed -i 's/-march=i386//g' soh/Makefile
        #sed -i '/pulse \\/i SDL2 \\\nGLEW \\' soh/Makefile
        #sed -i 's/clan//g' ZAPDTR/Makefile
        sed -i '/-Wno-missing-field-initializers/i -Wno-error=stringop-overflow \\' libultraship/Makefile # -Wno-error=multichar -Wno-error=sign-compare -Wno-unused-variable
        #sed -i '/libultraship \\/a \.\.\/StormLib\/src \\' libultraship/Makefile
        #cp appimage/audio_load.c soh/src/code/audio_load.c

    #- name: Build libultraship
    #  run: make -C libultraship -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"

    #- name: Build OTRExporter
    #  run: make -C OTRExporter/OTRExporter -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"

    #- name: Build ZAPDTR
    #  run: make -C ZAPDTR -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"

    - name: Build OTRGui
      run: |
        cmake -B OTRGui/build -S OTRGui -DOpenGL_GL_PREFERENCE=GLVND
        cmake --build OTRGui/build

    - name: Build SOH
      run: |
        make setup -C soh -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"
        make -C soh -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"

    - name: Ccache stats
      run: ccache -s

    - name: Prepare Artifact
      run: |
        mkdir artifacts
        cp soh/soh.elf artifacts
        cp OTRGui/build/OTRGui artifacts
        rsync -av --exclude='*.gitignore' OTRGui/build/assets artifacts/
        cp ZAPDTR/ZAPD.out artifacts/assets/extractor/
    - uses: actions/upload-artifact@v3
      with:
          name: SOH-Linux-z64
          path: artifacts
