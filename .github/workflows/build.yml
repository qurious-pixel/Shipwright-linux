name: Build

on: 
  push:
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  linux_gcc:
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++-11] #, clang++-14]
        include:
           - compiler: g++-11
             cc: gcc-11
           #- compiler: clang++-14
           #  cc: clang-14
        #compiler: [gcc, clang]
    name: Build Linux ${{ matrix.compiler }}
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: dlilja/Shipwright # HarbourMasters/Shipwright
        ref: bugfix/version_file_creation # develop-zhora

    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: appimage

    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/soh/ROM
          ~/.ccache
        key: build-${{github.run_id}}
        restore-keys: |
          build

    - name: Prepare Build
      run: |
        if [[ ! -e soh/ROM/baserom_non_mq.z64 ]]; then
          mkdir -p soh/ROM 
          wget -qO soh/ROM/ROM.zip ${{ secrets.DEBUG_ROM }} 2>/dev/null
          7za e soh/ROM/ROM.zip -so > soh/ROM/baserom_non_mq.z64
        fi
        cp soh/ROM/baserom_non_mq.z64 soh
        cp soh/ROM/baserom_non_mq.z64 OTRExporter

    - name: Remove Microsft Source List
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal

    - name: Install Dependencies
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y \
            libc6-dev \
            binutils \
            gcc-11 \
            g++-11 \
            python \
            ccache \
            cmake \
            lld \
            ninja-build \
            libsdl2-dev \
            zlib1g-dev \
            libbz2-dev \
            libpng-dev \
            libgles2-mesa-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 10
        gcc --version
        g++ --version

    #- name: Install Clang (Experimental)
    #  run: |
    #    wget https://apt.llvm.org/llvm.sh
    #    chmod +x llvm.sh
    #    sudo ./llvm.sh 14
    #    clang --version
    #    clang++ --version

    - name: Build glew
      run: |
        git clone https://github.com/Perlmint/glew-cmake.git 
        cmake glew-cmake 
        make -j$(nproc) 
        sudo make install ARCH64=true
        cp /usr/local/lib/libGLEW.a libultraship

    - name: Build SDL2
      run: |
        SDL2VER=2.24.0
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache
        if [[ ! -e SDL2-${SDL2VER} ]]; then
          curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
          tar -xzf SDL2-${SDL2VER}.tar.gz
          cd SDL2-${SDL2VER}
          ./configure --prefix=/usr
          make && cd ../
          rm SDL2-${SDL2VER}.tar.gz
        fi
        sudo make -C SDL2-${SDL2VER} install
        sudo cp -av /lib/libSDL* /lib/x86_64-linux-gnu/

    - name: Update Patchelf
      run: |
        PATCHELFVER=0.14.5
        curl -sL https://github.com/NixOS/patchelf/releases/download/${PATCHELFVER}/patchelf-${PATCHELFVER}-x86_64.tar.gz -o /tmp/patchelf.tar.gz
        tar -xvf /tmp/patchelf.tar.gz --directory /tmp/ ./bin/patchelf --strip-components=2 
        sudo mv /tmp/patchelf /usr/bin
        patchelf --version

    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/setup-go@v3
      with:
        go-version: '>=1.17.0'

    - name: Linux Fixes
      run: |
        echo "Custom fixes"

    - name: Build SOH
      run: |
        cmake -H. -Bbuild-cmake -GNinja -DSDL2_DIR=/usr/lib/cmake/SDL2/
        cmake --build build-cmake --target ExtractAssets
        cmake --build build-cmake

    - name: Ccache stats
      run: ccache -s

    #- name: Build CPACK packages
    #  run: |
    #    cd build-cmake
    #    cpack -G External
    #    cd ..
    #    mkdir Release
    #    cp _packages/{*.zip,*.deb} Release
    #    cp build-cmake/*.appimage Release
    #    ls -al Release
    #- uses: actions/upload-artifact@v3
    #  with:
    #      name: SOH-Linux-${{ matrix.compiler }}
    #      path: Release

    
    #- name: Build AppImage
    #  run: |
    #    chmod +x appimage/.github/workflows/scripts/appimage.sh
    #    appimage/.github/workflows/scripts/appimage.sh

    #- name: Publish Release
    #  run: |
    #    go install github.com/tcnksm/ghr@latest
    #    ghr -u qurious-pixel -r Shipwright-linux -recreate -n "AppImage 64bit build" -t "${{ secrets.GITHUB_TOKEN }}" zelda64 artifacts
