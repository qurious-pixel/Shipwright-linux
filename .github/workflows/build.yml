name: Build

on: 
  push:
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  switch_gcc:
    name: Build Switch NRO
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: KiritoDv/Shipwright
        ref: znx 

    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: appimage

    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/soh/ROM
          ~/.ccache
        key: build-${{github.run_id}}
        restore-keys: |
          build

    - name: Prepare Build
      run: |
        if [[ ! -e soh/ROM/baserom_non_mq.z64 ]]; then
          mkdir -p soh/ROM 
          wget -qO soh/ROM/ROM.zip ${{ secrets.DEBUG_ROM }} 2>/dev/null
          7za e soh/ROM/ROM.zip -so > soh/ROM/baserom_non_mq.z64
        fi
        cp soh/ROM/baserom_non_mq.z64 soh
        cp soh/ROM/baserom_non_mq.z64 OTRExporter

    - name: Remove Microsft Source List
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y \
            libc6-dev \
            binutils \
            gcc-10 \
            g++-10 \
            gcc-10-arm-linux-gnueabihf \
            pkg-config-arm-linux-gnueabihf \
            python \
            ccache \
            cmake \
            lld \
            libsdl2-dev \
            zlib1g-dev \
            libbz2-dev \
            libpng-dev \
            libgles2-mesa-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
        gcc --version
        g++ --version

    - name: Build glew
      run: |
        git clone https://github.com/Perlmint/glew-cmake.git 
        cmake glew-cmake 
        make -j$(nproc) 
        sudo make install ARCH64=true
        cp /usr/local/lib/libGLEW.a libultraship

    - name: Build SDL2
      run: |
        SDL2VER=2.0.22
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache
        if [[ ! -e SDL2-${SDL2VER} ]]; then
          curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
          tar -xzf SDL2-${SDL2VER}.tar.gz
          cd SDL2-${SDL2VER}
          ./configure --prefix=/usr
          make && cd ../
          rm SDL2-${SDL2VER}.tar.gz
        fi
        sudo make -C SDL2-${SDL2VER} install
        sudo cp -av /lib/libSDL* /lib/x86_64-linux-gnu/

    - uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/setup-go@v3
      with:
        go-version: '>=1.17.0'

    #- name: Linux Fixes
    #  run: |
    #    sed -i '/-Wno-missing-field-initializers/i -Wno-error=stringop-overflow \\' libultraship/Makefile # -Wno-error=multichar -Wno-error=sign-compare -Wno-unused-variable
    #    sed -i 's/exit(0);/_Exit(0);/g' libultraship/libultraship/Lib/Fast3D/gfx_glx.cpp
    #    sed -i 's/exit(0);/_Exit(0);/g' libultraship/libultraship/Lib/Fast3D/gfx_sdl2.cpp
    #    sed -i 's/-lGLEW //g' ZAPDTR/Makefile
    #    sed -i '/GLEW \\/d' soh/Makefile
    #    #sed -i '/libultraship \\/a \.\.\/StormLib\/src \\' libultraship/Makefile
    #    cp appimage/gfx_opengl.cpp libultraship/libultraship/Lib/Fast3D/gfx_opengl.cpp

    #- name: Build OTRGui
    #  run: |
    #    cmake -B OTRGui/build -S OTRGui -DOpenGL_GL_PREFERENCE=GLVND
    #    cmake --build OTRGui/build


    - name: Setup DevKitPro (deb)
      env:
        DEVKITPRO: /opt/devkitpro
        DEVKITARM: ${DEVKITPRO}/devkitARM
        DEVKITPPC: ${DEVKITPRO}/devkitPPC
      run: |
        mkdir -p /usr/local/share/keyring/
        wget -O /usr/local/share/keyring/devkitpro-pub.gpg https://apt.devkitpro.org/devkitpro-pub.gpg
        echo "deb [signed-by=/usr/local/share/keyring/devkitpro-pub.gpg] https://apt.devkitpro.org stable main" > /etc/apt/sources.list.d/devkitpro.list
        apt-get update -y
        apt-get install -y devkitpro-pacman
        yes | sudo dkp-pacman -Syu switch-dev switch-portlibs --noconfirm
        export PATH=${DEVKITPRO}/tools/bin:$PATH
        /opt/devkitpro/portlibs/switch/bin/aarch64-none-elf-cmake -B StormLib/build -S StormLib
        make -C StormLib/build -j$(nproc)
        sudo make install -C StormLib/build
        sudo cp /usr/local/lib/libstorm.a /opt/devkitpro/portlibs/switch/lib/
        sudo cp /usr/local/include/Storm* /opt/devkitpro/portlibs/switch/include/
    
    - name: Build SOH
      run: |
        make setup -C soh -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"
    #    make -j$(nproc) OPTFLAGS=-O2 DEBUG=0 CC="ccache gcc" CXX="ccache g++"

    #- name: Build extract assets
    #  run: |
    #    make -C ZAPDTR -j$(nproc)
    #    cd OTRExporter && python3 extract_assets.py
    #    cp oot.otr ../soh

    #- name: Build SOH NRO (docker)
    #  run: |
    #    sudo docker pull devkitpro/devkita64
    #    sudo docker run --rm -v $(pwd):/soh devkitpro/devkita64 /bin/bash -c "make -C soh -j$(nproc)"
    #    echo "ls soh"
    #    ls soh
    #    echo "ls soh/soh"
    #    ls soh/soh
    #    echo "ls soh/soh/build"
    #    ls soh/soh/build

    #- name: Build SOH NRO (deb)
    #  run: |
    #    echo $PWD
    #    ls -al .
    #    sudo dpkg -i appimage/.github/workflows/deb/*
    #    sudo dpk-pacman -S libnx
    #    export DEVKITPRO=/opt/devkitpro
    #    export DEVKITARM=${DEVKITPRO}/devkitARM
    #    export DEVKITARM=${DEVKITPRO}/devkitPPC
    #    export PATH=${DEVKITPRO}/tools/bin:$PATH
    #    make -j$(nproc)
    #    make -C soh -f Makefile.switch -j$(nproc)
    #    ls soh
    #    ls soh/build

    #- name: Ccache stats
    #  run: ccache -s

    #- name: Prepare Artifact
    #  run: |
    #    mkdir Release
    #    cp soh/soh.elf Release
    #    cp OTRGui/build/OTRGui Release
    #    rsync -av --exclude='*.gitignore' OTRGui/build/assets Release/
    #    cp ZAPDTR/ZAPD.out Release/assets/extractor/
    #    cp appimage/.github/workflows/scripts/OTR_Extractor.sh Release
    #    cp -r appimage/.github/workflows/scripts/version Release/assets/
    #- uses: actions/upload-artifact@v3
    #  with:
    #      name: SOH-Linux-z64
    #      path: Release

    #- name: Build AppImage
    #  run: |
    #    chmod +x appimage/.github/workflows/scripts/appimage.sh
    #    appimage/.github/workflows/scripts/appimage.sh

    #- name: Publish Release
    #  run: |
    #    go install github.com/tcnksm/ghr@latest
    #    ghr -u qurious-pixel -r Shipwright-linux -recreate -n "AppImage 64bit build" -t "${{ secrets.GITHUB_TOKEN }}" zelda64 artifacts
